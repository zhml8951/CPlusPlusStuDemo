#include <iostream>

// C++ bit operation(位操作) 

// 位逻辑运算 &<与>, |<或>, ^<异或>, ~<取反>

// & 按位<与>  0&1=0， 1&0=0， 0&0=0， 1&1=1；两数对应位置都为1时才为1；
// 常用判断偶数：  if(n%2==0){...} ====>  if (n&1 == 0) {...} 
// n&1 换算方法(假如n=9):  9转二进制： 1001， 1001 & 1 => 1001&001 => 1 即结果1；
// n&1 换算(假如n=10): 10二进制1010, 1010 & 1 ==> 1010&0001 => 0 即0；

// | 按位<或> 0|1=1， 1|0=1， 1|1=1， 0|0=0
// | 运算有无条件赋值的效果， 如：想某数为奇数，如12=>1100, 强制变奇数 1100|1,

// ^ 位异或   0^1=1, 1^0=1, 1^1=0, 0^0=0; 
// 6=110, 8=1000, 6^8: 110^1000 = 1110, 1110^110=1000, 1110^1000=110;
// 两次异或可回到本来数。

// ~ 位取反。按位取反需要注意数值类型，有符号与无符号，数值位数都影响运算结果。 

// 位右移>>
// x >> 1 也就是去掉最后一位。 移几位相当于除于2的几次方， 240>>1=[240/(2^1)]=120;  240>>2=[240/(2^2)]=60;

// 位左移<<
// x << 1 最后一位加0， 向左移一位， 移几位相当于乘以2的几次方， 240<<1=[240*(2^1)]=480, 240<<2=[240*(2^2)]=960;


